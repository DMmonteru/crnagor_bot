import logging
from bot_token import bot_token
from text_content import *
from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.exceptions import BotBlocked
from aiogram.types import InputFile

bot = Bot(token=bot_token)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# presentation = InputFile("content/eBook.pdf")  # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
# TODO: –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –≤ —Å—Ç–∏–ª–µ –∏–≥—Ä—ã


@dp.message_handler(commands="start")
@dp.message_handler(lambda message: message.text == "üîô")  # main keyboard
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons = BUTTONS_MAIN
    keyboard.add(*buttons)
    await message.answer("<u>–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è. –ì–æ—Ä—ã –≤ –∑–µ—Ä–∫–∞–ª–µ –ê–¥—Ä–∏–∞—Ç–∏–∫–∏</u>", parse_mode="HTMl")
    await message.answer("Dobrodo≈°li!\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è –≤–∞–º —Å –∫–Ω–∏–≥–æ–π –æ –ß–µ—Ä–Ω–æ–≥–æ—Ä–∏–∏. ‚Üì",
                         reply_markup=keyboard)


@dp.message_handler(lambda message: message.text in BUTTONS_MAIN)  # main keyboard' buttons handler
async def main_buttons(message: types.Message):
    try:
        if message.text == BUTTONS_MAIN[0]:
            buttons = [types.InlineKeyboardButton(text=BUTTONS_BOOK[i],
                                                  callback_data=BUTTONS_BOOK[i]) for i in range(len(BUTTONS_BOOK))]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: ‚Üì", reply_markup=keyboard)
        elif message.text == BUTTONS_MAIN[1]:
            await message.answer(text="–ú—É—Ü–µ–≤–∏—á –ê–¥–∞–ª–µ—Ç–∞, —Å—Ç—É–¥–µ–Ω—Ç –ú–æ—Å–∫–≤–æ—Å–∫–æ–≥–æ –ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ "
                                      "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –∏ –ª—é–±–∏—Ç–µ–ª—å –±–∞–ª–∫–∞–Ω—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω.")
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(types.InlineKeyboardButton(text="–ê–¥–∞–ª–µ—Ç–∞ –Ω–∞ Bƒìhance",
                                                    url="https://www.behance.net/adaletamutsevi"))
            await message.answer(text="@Mutsv_A", reply_markup=keyboard)
        elif message.text == BUTTONS_MAIN[2]:  # TODO: –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–æ–ª–∏–∫ –Ω–∞ —é—Ç—É–± –∏ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ —Å—Å—ã–ª–∫—É
            await message.answer(text="*—Ç—É—Ç –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —é—Ç—É–± —Ä–æ–ª–∏–∫*")
        elif message.text == BUTTONS_MAIN[3]:  # TODO: –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–¥—Ñ–∫—É –Ω–∞ –≥—É–≥–ª –¥–∏—Å–∫ –∏ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ —Å—Å—ã–ª–∫—É
            await message.answer(text="–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ‚Üì\n*—Ç—É—Ç –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª –¥–æ–∫*")
            # await bot.send_document(document=presentation, chat_id=message.chat.id)
        elif message.text == BUTTONS_MAIN[4]:
            buttons = [types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –Ω–∞ Ozon", url="https://www.ozon.ru/product/"
                                                                             "chernogoriya-gory-v-zerkale-adriatiki"
                                                                             "-raskina-elena-yurevna-kozhemyakin-"
                                                                             "mihail-vladimirovich-255663281/"),
                       types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –≤ –õ–∞–±–∏—Ä–∏–Ω—Ç–µ", url="https://www.labirint.ru/"
                                                                                 "books/375420/")]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)
            await message.answer("–°—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω—ã", reply_markup=keyboard)
    except IndexError as ie:  # –ï—Å–ª–∏ –∑–∞–±—ã–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª-–≤–∞ –∫–Ω–æ–ø–æ–∫
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —á–∞—Å—Ç–∏!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"[ERROR]: {ie}")


@dp.callback_query_handler(lambda c: c.data in BUTTONS_BOOK)  # handles callback keyboard about book
async def book_buttons(call: types.CallbackQuery):
    try:
        if call.data == BUTTONS_BOOK[0]:
            await call.answer(text=SHORT_INFO, show_alert=True)
        elif call.data == BUTTONS_BOOK[1]:
            await call.answer()
            try:
                photos = [InputFile("content/kotor.png"), InputFile("content/map.png"),
                          InputFile("content/perast.png"), InputFile("content/zmajevic.png")]
                await call.message.answer("Moƒá dizajna ‚Üì")
                for i in photos:
                    await bot.send_document(document=i, chat_id=call.message.chat.id)
            except FileNotFoundError as fe:
                await call.message.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω—è")
                print(f"[ERROR]: {fe}")
        elif call.data == BUTTONS_BOOK[2]:
            buttons = [types.InlineKeyboardButton(text=BUTTONS_NAVIGATION[i],
                                                  callback_data=BUTTONS_NAVIGATION[i])
                       for i in range(len(BUTTONS_NAVIGATION))]
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(*buttons)
            await call.answer()
            await call.message.answer("–£–∑–Ω–∞–π—Ç–µ, –≥–¥–µ –≤ –∫–Ω–∏–≥–µ –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã: ‚Üì", reply_markup=keyboard)
        elif call.data == BUTTONS_BOOK[3]:
            buttons = ["üîô"] + [str(i) for i in range(1, len(BUTTONS_CITIES) + 1)]
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
            keyboard.add(*buttons)
            await call.answer()
            await call.message.answer(
                "\n".join([str(i + 1) + ") " + list(BUTTONS_CITIES)[i] for i in range(len(BUTTONS_CITIES))]))
            await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥/–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ ‚Üì", reply_markup=keyboard)
    except IndexError as ie:  # –ï—Å–ª–∏ –∑–∞–±—ã–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª-–≤–∞ –∫–Ω–æ–ø–æ–∫
        await call.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —á–∞—Å—Ç–∏!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await call.answer()
        print(f"[ERROR]: {ie}")


@dp.callback_query_handler(lambda c: c.data in BUTTONS_NAVIGATION)  # handles callback buttons about book navigation
async def navigation_buttons(call: types.CallbackQuery):
    try:
        await call.answer(text=NAVIGATION_INFO[BUTTONS_NAVIGATION.index(call.data)], show_alert=True)
    except IndexError as ie:  # –ï—Å–ª–∏ –∑–∞–±—ã–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª-–≤–∞ –∫–Ω–æ–ø–æ–∫
        await call.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —á–∞—Å—Ç–∏!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"[ERROR]: {ie}")


# respond to an index of some place in list BUTTONS_CITIES
@dp.message_handler(lambda message: message.text in [str(i + 1) for i in range(len(BUTTONS_CITIES))])
async def cities_buttons(message: types.Message):
    cities_list = BUTTONS_CITIES[list(BUTTONS_CITIES)[int(message.text) - 1]]
    await message.answer(f"<b>{list(BUTTONS_CITIES)[int(message.text) - 1]}</b>", parse_mode="HTMl")
    await message.answer(f"–°–º–æ—Ç—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:\n{cities_list[0]}") if cities_list[0] else \
        await message.answer("–ü–æ–∫–∞ —á—Ç–æ –≤ –∫–Ω–∏–≥–µ –Ω–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è —ç—Ç–æ –º–µ—Å—Ç–æ")
    if len(cities_list) > 1:
        buttons = [types.InlineKeyboardButton(text=f"–°—Ç–∞—Ç—å—è {i}",
                                              url=cities_list[i]) for i in range(1, len(cities_list))]
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(*buttons)
        await message.answer("–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–ª–∏—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text not in BUTTONS_BOOK + BUTTONS_MAIN)  # respond to random message.text
async def normal_text_response(message: types.Message):
    await message.reply("Ne razumijem te!\n–ü–æ–ª–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏. ‚Üì")


@dp.errors_handler(exception=BotBlocked)  # if user blocked bot while he is processing some request
async def error_bot_blocked(update: types.Update, exception: BotBlocked):
    # Update: –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram. Exception: –æ–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫–∞–∫-—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    print(f"–ú–µ–Ω—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–°–æ–æ–±—â–µ–Ω–∏–µ: {update}\n–û—à–∏–±–∫–∞: {exception}")
    return True


if __name__ == "__main__":
    # run
    executor.start_polling(dp, skip_updates=True)
